{"version":3,"sources":["../index.ts"],"sourcesContent":["import { CodeBlockWriter, Project, VariableDeclarationKind } from 'ts-morph';\r\nimport path from 'path';\r\n\r\ninterface GenerateOptions {\r\n  inputGlob: string;\r\n  outputFile: string;\r\n  baseDir: string;\r\n  varName: string;\r\n  specificKeyword: string;\r\n  importType?: 'default' | 'type';\r\n  write: (writer: CodeBlockWriter, classes: { className: string, path: string }[]) => void;\r\n}\r\n\r\nexport async function generateConfig(options: GenerateOptions) {\r\n  const { inputGlob, outputFile, baseDir, varName, specificKeyword, write, importType = 'default' } = options;\r\n\r\n  const project = new Project({\r\n    manipulationSettings: {\r\n      indentationText: '  ' as any, // 2 spaces\r\n    },\r\n  });\r\n  const sourceFiles = project.addSourceFilesAtPaths(inputGlob);\r\n  const configFile = project.createSourceFile(outputFile, '', { overwrite: true });\r\n  const classes = [] as { className: string, path: string }[];\r\n\r\n  // 각 소스 파일을 순회하면서 클래스 정보 추출\r\n  for (const sourceFile of sourceFiles) {\r\n    /**\r\n     * STEP 1: export된 클래스 찾기\r\n     * 파일에서 export된 클래스를 찾습니다.\r\n     * 지원하는 형태:\r\n     * - export default class UserRoute { ... }\r\n     * - export class UserRoute { ... }\r\n     * - class UserRoute { ... } export { UserRoute }\r\n     * - class UserRoute { ... } export { UserRoute as default }\r\n     */\r\n    let routeClass = sourceFile.getClasses().find(c => c.isDefaultExport());\r\n    \r\n    if (!routeClass) {\r\n      // export default가 없으면 다른 export 방식 찾기\r\n      routeClass = sourceFile.getClasses().find(c => c.isExported());\r\n      \r\n      if (!routeClass) {\r\n        // named export도 없으면 export 구문에서 찾기\r\n        const exportDeclarations = sourceFile.getExportDeclarations();\r\n        for (const exportDecl of exportDeclarations) {\r\n          const namedExports = exportDecl.getNamedExports();\r\n          for (const namedExport of namedExports) {\r\n            const exportName = namedExport.getName();\r\n            const foundClass = sourceFile.getClass(exportName);\r\n            if (foundClass) {\r\n              routeClass = foundClass;\r\n              break;\r\n            }\r\n          }\r\n          if (routeClass) break;\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (!routeClass) {\r\n      console.warn(`⚠️  No exported class found in ${sourceFile.getFilePath()}, skipping...`);\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * STEP 2: 클래스 이름 결정\r\n     * 클래스에 이름이 있으면 사용하고, 없으면 파일명으로부터 생성합니다.\r\n     */\r\n    let className = routeClass.getName(); // 예: export default class MyRoute -> \"MyRoute\"\r\n\r\n    if (!className) {\r\n      /**\r\n       * 익명 클래스의 경우 파일명으로부터 클래스명 생성\r\n       * 예: 'user.route.ts' -> 'user' -> 'UserRoute'\r\n       * 예: 'short-code.route.ts' -> 'short-code' -> 'ShortCodeRoute'\r\n       */\r\n      const fileName = path.basename(sourceFile.getFilePath(), `.${specificKeyword.toLocaleLowerCase()}.ts`);\r\n      className = fileName\r\n        .split('-') // 하이픈으로 분리\r\n        .map(part => part.charAt(0).toUpperCase() + part.slice(1)) // 각 부분을 PascalCase로\r\n        .join('') + (specificKeyword.charAt(0).toUpperCase() + specificKeyword.slice(1)); // 키워드 추가\r\n    }\r\n\r\n    /**\r\n     * STEP 3: 파일 경로 처리\r\n     * 상대 경로를 계산하고 URL 경로 형태로 변환합니다.\r\n     */\r\n    const relativePath = path.relative(baseDir, sourceFile.getFilePath());\r\n    const fullPath = relativePath.replace(/\\\\/g, '/').replace('.ts', '');\r\n    // 주석 처리된 부분들은 추후 라우팅 경로 변환 로직으로 활용 가능:\r\n    // - Windows 경로를 Unix 경로로 변환: .replace(/\\\\/g, '/')\r\n    // - 동적 라우팅 패턴 변환: .replace(/\\[([^\\]]+)\\]/g, ':$1') \r\n    // - 현재 디렉토리 제거: .replace(/^\\./, '')\r\n    // - index 파일 경로 정리: .replace(/\\/index$/, '') || '/';\r\n\r\n    // Import 구문 생성\r\n    const moduleSpecifier = path.relative(path.dirname(options.outputFile), sourceFile.getFilePath())\r\n      .replace(/\\\\/g, '/')\r\n      .replace('.ts', '');\r\n\r\n    const isDefaultExport = routeClass.isDefaultExport();\r\n\r\n    switch (importType) {\r\n      case 'type':\r\n        if (isDefaultExport) {\r\n          configFile.addImportDeclaration({\r\n            defaultImport: className,\r\n            moduleSpecifier,\r\n            isTypeOnly: true,\r\n          });\r\n        } else {\r\n          configFile.addImportDeclaration({\r\n            namedImports: [className],\r\n            moduleSpecifier,\r\n            isTypeOnly: true,\r\n          });\r\n        }\r\n        break;\r\n      case 'default':\r\n      default:\r\n        if (isDefaultExport) {\r\n          configFile.addImportDeclaration({\r\n            defaultImport: className,\r\n            moduleSpecifier,\r\n          });\r\n        } else {\r\n          configFile.addImportDeclaration({\r\n            namedImports: [className],\r\n            moduleSpecifier,\r\n          });\r\n        }\r\n        break;\r\n    }\r\n\r\n    /**\r\n     * STEP 5: 클래스 정보 저장\r\n     * 나중에 사용할 수 있도록 클래스 정보를 배열에 저장합니다.\r\n     */\r\n    classes.push({\r\n      className: className,\r\n      path: fullPath,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * STEP 6: Export 변수 생성\r\n   * 모든 클래스 정보를 담은 변수를 생성하고 export합니다.\r\n   * 사용자가 제공한 write 함수를 통해 커스텀 출력 형태를 생성할 수 있습니다.\r\n   */\r\n  \r\n  // keys 배열 생성 (공통)\r\n  configFile.addVariableStatement({\r\n    isExported: true,\r\n    declarationKind: VariableDeclarationKind.Const,\r\n    declarations: [{\r\n      name: 'keys',\r\n      initializer: `[${classes.map(({ className }) => `'${className}'`).join(', ')}] as const`,\r\n    }],\r\n  });\r\n\r\n  if (importType === 'type') {\r\n    // type import의 경우 인터페이스 생성\r\n    configFile.addInterface({\r\n      isExported: true,\r\n      name: varName.charAt(0).toUpperCase() + varName.slice(1), // PascalCase로 변환\r\n      properties: classes.map(({ className }) => ({\r\n        name: className,\r\n        type: className,\r\n      })),\r\n    });\r\n  } else {\r\n    // 일반 import의 경우 사용자가 제공한 write 함수 사용\r\n    configFile.addVariableStatement({\r\n      isExported: true,\r\n      declarationKind: VariableDeclarationKind.Const,\r\n      declarations: [{\r\n        name: varName,\r\n        initializer: (writer) => write(writer, classes),\r\n      }],\r\n    });\r\n  }\r\n\r\n  /**\r\n   * STEP 7: 파일 저장 및 완료 메시지\r\n   * 생성된 TypeScript 파일을 디스크에 저장하고 완료 메시지를 출력합니다.\r\n   */\r\n  await project.save();\r\n  console.log(`✅ ${varName} generated at ${outputFile}`);\r\n}"],"mappings":";AAAA,SAA0B,SAAS,+BAA+B;AAClE,OAAO,UAAU;AAYjB,eAAsB,eAAe,SAA0B;AAC7D,QAAM,EAAE,WAAW,YAAY,SAAS,SAAS,iBAAiB,OAAO,aAAa,UAAU,IAAI;AAEpG,QAAM,UAAU,IAAI,QAAQ;AAAA,IAC1B,sBAAsB;AAAA,MACpB,iBAAiB;AAAA;AAAA,IACnB;AAAA,EACF,CAAC;AACD,QAAM,cAAc,QAAQ,sBAAsB,SAAS;AAC3D,QAAM,aAAa,QAAQ,iBAAiB,YAAY,IAAI,EAAE,WAAW,KAAK,CAAC;AAC/E,QAAM,UAAU,CAAC;AAGjB,aAAW,cAAc,aAAa;AAUpC,QAAI,aAAa,WAAW,WAAW,EAAE,KAAK,OAAK,EAAE,gBAAgB,CAAC;AAEtE,QAAI,CAAC,YAAY;AAEf,mBAAa,WAAW,WAAW,EAAE,KAAK,OAAK,EAAE,WAAW,CAAC;AAE7D,UAAI,CAAC,YAAY;AAEf,cAAM,qBAAqB,WAAW,sBAAsB;AAC5D,mBAAW,cAAc,oBAAoB;AAC3C,gBAAM,eAAe,WAAW,gBAAgB;AAChD,qBAAW,eAAe,cAAc;AACtC,kBAAM,aAAa,YAAY,QAAQ;AACvC,kBAAM,aAAa,WAAW,SAAS,UAAU;AACjD,gBAAI,YAAY;AACd,2BAAa;AACb;AAAA,YACF;AAAA,UACF;AACA,cAAI,WAAY;AAAA,QAClB;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,YAAY;AACf,cAAQ,KAAK,4CAAkC,WAAW,YAAY,CAAC,eAAe;AACtF;AAAA,IACF;AAMA,QAAI,YAAY,WAAW,QAAQ;AAEnC,QAAI,CAAC,WAAW;AAMd,YAAM,WAAW,KAAK,SAAS,WAAW,YAAY,GAAG,IAAI,gBAAgB,kBAAkB,CAAC,KAAK;AACrG,kBAAY,SACT,MAAM,GAAG,EACT,IAAI,UAAQ,KAAK,OAAO,CAAC,EAAE,YAAY,IAAI,KAAK,MAAM,CAAC,CAAC,EACxD,KAAK,EAAE,KAAK,gBAAgB,OAAO,CAAC,EAAE,YAAY,IAAI,gBAAgB,MAAM,CAAC;AAAA,IAClF;AAMA,UAAM,eAAe,KAAK,SAAS,SAAS,WAAW,YAAY,CAAC;AACpE,UAAM,WAAW,aAAa,QAAQ,OAAO,GAAG,EAAE,QAAQ,OAAO,EAAE;AAQnE,UAAM,kBAAkB,KAAK,SAAS,KAAK,QAAQ,QAAQ,UAAU,GAAG,WAAW,YAAY,CAAC,EAC7F,QAAQ,OAAO,GAAG,EAClB,QAAQ,OAAO,EAAE;AAEpB,UAAM,kBAAkB,WAAW,gBAAgB;AAEnD,YAAQ,YAAY;AAAA,MAClB,KAAK;AACH,YAAI,iBAAiB;AACnB,qBAAW,qBAAqB;AAAA,YAC9B,eAAe;AAAA,YACf;AAAA,YACA,YAAY;AAAA,UACd,CAAC;AAAA,QACH,OAAO;AACL,qBAAW,qBAAqB;AAAA,YAC9B,cAAc,CAAC,SAAS;AAAA,YACxB;AAAA,YACA,YAAY;AAAA,UACd,CAAC;AAAA,QACH;AACA;AAAA,MACF,KAAK;AAAA,MACL;AACE,YAAI,iBAAiB;AACnB,qBAAW,qBAAqB;AAAA,YAC9B,eAAe;AAAA,YACf;AAAA,UACF,CAAC;AAAA,QACH,OAAO;AACL,qBAAW,qBAAqB;AAAA,YAC9B,cAAc,CAAC,SAAS;AAAA,YACxB;AAAA,UACF,CAAC;AAAA,QACH;AACA;AAAA,IACJ;AAMA,YAAQ,KAAK;AAAA,MACX;AAAA,MACA,MAAM;AAAA,IACR,CAAC;AAAA,EACH;AASA,aAAW,qBAAqB;AAAA,IAC9B,YAAY;AAAA,IACZ,iBAAiB,wBAAwB;AAAA,IACzC,cAAc,CAAC;AAAA,MACb,MAAM;AAAA,MACN,aAAa,IAAI,QAAQ,IAAI,CAAC,EAAE,UAAU,MAAM,IAAI,SAAS,GAAG,EAAE,KAAK,IAAI,CAAC;AAAA,IAC9E,CAAC;AAAA,EACH,CAAC;AAED,MAAI,eAAe,QAAQ;AAEzB,eAAW,aAAa;AAAA,MACtB,YAAY;AAAA,MACZ,MAAM,QAAQ,OAAO,CAAC,EAAE,YAAY,IAAI,QAAQ,MAAM,CAAC;AAAA;AAAA,MACvD,YAAY,QAAQ,IAAI,CAAC,EAAE,UAAU,OAAO;AAAA,QAC1C,MAAM;AAAA,QACN,MAAM;AAAA,MACR,EAAE;AAAA,IACJ,CAAC;AAAA,EACH,OAAO;AAEL,eAAW,qBAAqB;AAAA,MAC9B,YAAY;AAAA,MACZ,iBAAiB,wBAAwB;AAAA,MACzC,cAAc,CAAC;AAAA,QACb,MAAM;AAAA,QACN,aAAa,CAAC,WAAW,MAAM,QAAQ,OAAO;AAAA,MAChD,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAMA,QAAM,QAAQ,KAAK;AACnB,UAAQ,IAAI,UAAK,OAAO,iBAAiB,UAAU,EAAE;AACvD;","names":[]}